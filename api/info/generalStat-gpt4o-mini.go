// generated by ChatGPT 4o mini
package main

import (
	"html/template"
	"net/http"
)

type Data struct {
	Entries              int
	UniqueIPAddresses    int
	AverageResponseTime  float64
	BlackOxygeniumValue  string
	CuteGanymedeValue    string
}

const htmlTemplate = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Statistics Table</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h1>Statistics Overview</h1>
    <table>
        <thead>
            <tr>
                <th>Indicator</th>
                <th>Black Oxygenium</th>
                <th>Cute Ganymede</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Total number of entries</td>
                <td>{{.BlackOxygeniumValue}}</td>
                <td>{{.CuteGanymedeValue}}</td>
            </tr>
            <tr>
                <td>Number of unique IP addresses</td>
                <td>{{.UniqueIPAddresses}}</td>
                <td>{{.UniqueIPAddresses}}</td>
            </tr>
            <tr>
                <td>Average response time (ms)</td>
                <td>{{.AverageResponseTime}}</td>
                <td>{{.AverageResponseTime}}</td>
            </tr>
        </tbody>
    </table>
</body>
</html>
`

func handler(w http.ResponseWriter, r *http.Request) {
	data := Data{
		Entries:              100, // Example value
		UniqueIPAddresses:    50,  // Example value
		AverageResponseTime:  200.5, // Example value in milliseconds
		BlackOxygeniumValue:  "Value 1", // Example value
		CuteGanymedeValue:    "Value 2", // Example value
	}

	tmpl, err := template.New("stats").Parse(htmlTemplate)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	err = tmpl.Execute(w, data)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

func main() {
	http.HandleFunc("/", handler)
	http.ListenAndServe(":8080", nil)
}

